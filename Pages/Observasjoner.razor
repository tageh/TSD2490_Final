@page "/observasjoner"

@using Gruppe11.Data;
@using Models;
@using System.Linq;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@inject IHttpClientFactory Factory
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<ObservasjonService>
<h3>Observasjoner</h3>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity?.Name!</h4>
        <br />
        <h3>Tempraturer den siste uken</h3>
        @if (observasjoner == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Show the forecasts for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Dato</th>
                        <th>Temp. (C)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in observasjoner)
                    {
                        <tr>
                            <td>@forecast.Dato?.ToString("yyyy-MM-dd")</td>
                            <td>@forecast.Temperatur?.ToString("#.##")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code 
{
    FrostAPI frostAPI = new FrostAPI();
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<Observasjon> observasjoner = new List<Observasjon>();
    private string UserIdentityName = "";

    string sisteUken = DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd");

    Observasjon objWeatherForecast = new Observasjon();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(sisteUken);
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        observasjoner = await @Service.GetForecastAsync(UserIdentityName);

        //API
        observasjoner = frostAPI.HentOvservasjoner(UserIdentityName.ToString()); 

    }
   
}