@page "/observasjoner"
@using Gruppe11.Data.Services
@using Gruppe11.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<ObservasjonService>
@inject FrostAPIService FrostAPIService

<h1>Observasjoner</h1>
<hr />
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>

        <h3>Showing @antall records</h3>
        <_FiltrerObservasjoner Filtrere="FiltrerObservasjoner" />

        @if (lastetData == false)
        {
            <div class="d-flex align-items-center">
                <strong>Loading...</strong>
                <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
            </div>
        }
        else
        {
            <!-- Show the forecasts for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Dato</th>
                        <th>Temperatur (C)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var observasjon in observasjoner)
                    {
                        <tr>
                            <td>@observasjon.Dato?.ToString("yyyy-MM-dd")</td>
                            <td>@observasjon.Temperatur?.ToString("#.##")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code
{
    List<Observasjon> observasjoner = new List<Observasjon>();
    List<Observasjon> alleObservasjoner = new List<Observasjon>();

    int antall = 0;
    bool lastetData = false;

    protected override async Task OnInitializedAsync()
    {
        observasjoner = await FrostAPIService.HentOvservasjoner();

        await Service.CreateObservasjonerAsync(observasjoner);

        alleObservasjoner = await Service.GetObservasjonAsync();

        observasjoner = alleObservasjoner.OrderBy(o => o.Dato).TakeLast(7).ToList();
        tellAntall();
        lastetData = true;
    }

    public void FiltrerObservasjoner(DatoFilter datoFiler)
    {
        observasjoner = alleObservasjoner.Where(o => o.Dato >= datoFiler.FraDato && o.Dato <= datoFiler.TilDato).ToList();
        tellAntall();
    }

    public void tellAntall() => antall = observasjoner.Count;
}
