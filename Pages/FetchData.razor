@page "/fetchdata"
@using Gruppe11.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<WeatherForecastService>
<h1>Weather forecast</h1>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity?.Name!</h4>
        @if (forecasts == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Show the forecasts for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Dato</th>
                        <th>Temp. (C)</th>
                        <th>Kommentar</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Dato?.ToString()</td>
                            <td>@forecast.Temperatur</td>
                            <td>@forecast.Kommentar</td>
                            <td>
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary"
                                @onclick="(() => EditForecast(forecast))">
                                Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <p>
            <!-- Add a new forecast -->
            <button class="btn btn-success"
                    @onclick="AddNewForecast">
                    Add New Forecast
                </button>
            </p>
            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a forecast -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">@tittel</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <input class="form-control" type="text" placeholder="Celsius forecast" @bind="objWeatherForecast.Temperatur" />
                                <input class="form-control" type="text" placeholder="Kommentar" @bind="objWeatherForecast.Kommentar" />
                                <br />
                                <!-- Button to save the forecast -->
                                <button class="btn btn-success" @onclick="SaveForecast">
                                    Save
                                </button>&nbsp;
                                @if (objWeatherForecast.Id > 0)
                                {                                    
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger"
                                    @onclick="DeleteForecast">
                                    Delete
                                </button>
                                }
                             </div>
                        </div>
                    </div>
                </div>
            }
        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code 
{
    string tittel = "";
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<VærMelding> forecasts = new List<VærMelding>();
    private string UserIdentityName = "";
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        forecasts = await @Service.GetForecastAsync(UserIdentityName);
    }

    VærMelding objWeatherForecast = new VærMelding();
    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewForecast()
    {
        // Make new forecast
        objWeatherForecast = new VærMelding();
        // Set Id to 0 so we know it is a new record
        objWeatherForecast.Id = 0;
        // Open the Popup
        ShowPopup = true;
        tittel = "Add new Forcast";
    }
    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // A new forecast will have the Id set to 0 
        if (objWeatherForecast.Id == 0)
        {
            // Create new forecast
            VærMelding objNewWeatherForecast = new VærMelding();
            objNewWeatherForecast.Dato = System.DateTime.Now;
            objNewWeatherForecast.Kommentar = objWeatherForecast.Kommentar;
            objNewWeatherForecast.Temperatur = Convert.ToInt32(objWeatherForecast.Temperatur);
            objNewWeatherForecast.Bruker = UserIdentityName;
            // Save the result
            var result = @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else
        {
            bool oppdatert = await @Service.UpdateForecastAsync(objWeatherForecast);
        }
        // Get the forecasts for the current user
        forecasts = await @Service.GetForecastAsync(UserIdentityName);
    }
    void EditForecast(VærMelding værMelding)
    {
        objWeatherForecast = værMelding;
        ShowPopup = true;
        tittel = "Edit Forcast";
    }

    async Task DeleteForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Delete the forecast
        var result = @Service.DeleteForecastAsync(objWeatherForecast);
        // Get the forecasts for the current user
        forecasts = await @Service.GetForecastAsync(UserIdentityName);
    }

}